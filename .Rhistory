x = "Semana",
y = "Peso (kg)",
color = "Vitamina E (mg/kg)",
linetype = "Cobre (mg/kg)") +
theme_minimal()
# Gráfico de Weight a lo largo del tiempo
ggplot(dietox, aes(x = Time, y = Weight, group = Pig, color = as.factor(Cu))) +
geom_line(alpha = 0.5) +
facet_wrap(~Evit) +
labs(title = "Evolución del peso a lo largo del tiempo según el nivel de vitamina E y cobre",
x = "Tiempo (semanas)", y = "Peso (kg)") +
theme_minimal()
# Ajustar el modelo mixto
modelo <- lmer(Weight ~ Time + Evit * Cu + Start + Feed + (1 | Pig) + (1 | Litter), data = dietox)
# Resumen del modelo
summary(modelo)
library(nlme)
modelo_cor <- lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,  # Efecto aleatorio por cerdo
correlation = corAR1(form = ~ Time | Pig),  # Correlación temporal dentro de cada cerdo
data = dietox)
library(nlme)
modelo_cor <- nlme::lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,  # Efecto aleatorio por cerdo
correlation = corAR1(form = ~ Time | Pig),  # Correlación temporal dentro de cada cerdo
data = dietox)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(geepack)
library(ggplot2)
library(nlme)
library(lme4)
library(car)
data(dietox)
# Resumen estadístico de las variables
summary(dietox)
# Gráfico de la evolución del peso con el tiempo según Evit y Cu
ggplot(dietox, aes(x = Time, y = Weight, color = factor(Evit), linetype = factor(Cu))) +
geom_line(aes(group = Pig), alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2) +
labs(title = "Evolución del Peso a lo largo del Tiempo",
x = "Semana",
y = "Peso (kg)",
color = "Vitamina E (mg/kg)",
linetype = "Cobre (mg/kg)") +
theme_minimal()
# Gráfico de Weight a lo largo del tiempo
ggplot(dietox, aes(x = Time, y = Weight, group = Pig, color = as.factor(Cu))) +
geom_line(alpha = 0.5) +
facet_wrap(~Evit) +
labs(title = "Evolución del peso a lo largo del tiempo según el nivel de vitamina E y cobre",
x = "Tiempo (semanas)", y = "Peso (kg)") +
theme_minimal()
# Ajustar el modelo mixto
modelo <- lme4::lmer(Weight ~ Time + Evit * Cu + Start + Feed + (1 | Pig) + (1 | Litter), data = dietox)
# Resumen del modelo
summary(modelo)
library(nlme)
modelo_cor <- nlme::lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,  # Efecto aleatorio por cerdo
correlation = corAR1(form = ~ Time | Pig),  # Correlación temporal dentro de cada cerdo
data = dietox)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(geepack)
library(ggplot2)
library(nlme)
library(lme4)
library(car)
data(dietox)
# Resumen estadístico de las variables
summary(dietox)
dietox <- na.omit(dietox)
# Gráfico de la evolución del peso con el tiempo según Evit y Cu
ggplot(dietox, aes(x = Time, y = Weight, color = factor(Evit), linetype = factor(Cu))) +
geom_line(aes(group = Pig), alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2) +
labs(title = "Evolución del Peso a lo largo del Tiempo",
x = "Semana",
y = "Peso (kg)",
color = "Vitamina E (mg/kg)",
linetype = "Cobre (mg/kg)") +
theme_minimal()
# Gráfico de Weight a lo largo del tiempo
ggplot(dietox, aes(x = Time, y = Weight, group = Pig, color = as.factor(Cu))) +
geom_line(alpha = 0.5) +
facet_wrap(~Evit) +
labs(title = "Evolución del peso a lo largo del tiempo según el nivel de vitamina E y cobre",
x = "Tiempo (semanas)", y = "Peso (kg)") +
theme_minimal()
# Ajustar el modelo mixto
modelo <- lme4::lmer(Weight ~ Time + Evit * Cu + Start + Feed + (1 | Pig) + (1 | Litter), data = dietox)
# Resumen del modelo
summary(modelo)
library(nlme)
modelo_cor <- nlme::lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,  # Efecto aleatorio por cerdo
correlation = corAR1(form = ~ Time | Pig),  # Correlación temporal dentro de cada cerdo
data = dietox)
summary(modelo_cor)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(geepack)
library(ggplot2)
library(nlme)
library(lme4)
library(car)
data(dietox)
# Resumen estadístico de las variables
summary(dietox)
dietox <- na.omit(dietox)
# Gráfico de la evolución del peso con el tiempo según Evit y Cu
ggplot(dietox, aes(x = Time, y = Weight, color = factor(Evit), linetype = factor(Cu))) +
geom_line(aes(group = Pig), alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2) +
labs(title = "Evolución del Peso a lo largo del Tiempo",
x = "Semana",
y = "Peso (kg)",
color = "Vitamina E (mg/kg)",
linetype = "Cobre (mg/kg)") +
theme_minimal()
# Gráfico de Weight a lo largo del tiempo
ggplot(dietox, aes(x = Time, y = Weight, group = Pig, color = as.factor(Cu))) +
geom_line(alpha = 0.5) +
facet_wrap(~Evit) +
labs(title = "Evolución del peso a lo largo del tiempo según el nivel de vitamina E y cobre",
x = "Tiempo (semanas)", y = "Peso (kg)") +
theme_minimal()
# Ajustar el modelo mixto
modelo <- lme4::lmer(Weight ~ Time + Evit * Cu + Start + Feed + (1 | Pig) + (1 | Litter), data = dietox)
# Resumen del modelo
summary(modelo)
library(nlme)
modelo_cor <- nlme::lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,  # Efecto aleatorio por cerdo
correlation = corAR1(form = ~ Time | Pig),  # Correlación temporal dentro de cada cerdo
data = dietox)
summary(modelo_cor)
modelo_comp <- lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,
correlation = corCompSymm(form = ~ Time | Pig),
data = dietox_clean)
modelo_comp <- lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,
correlation = corCompSymm(form = ~ Time | Pig),
data = dietox)
summary(modelo_comp)
modelo_simp <- lme(Weight ~ Time + Evit + Cu + Start + Feed,
random = ~ 1 | Pig,
correlation = corAR1(form = ~ Time | Pig),
data = dietox_clean)
modelo_simp <- lme(Weight ~ Time + Evit + Cu + Start + Feed,
random = ~ 1 | Pig,
correlation = corAR1(form = ~ Time | Pig),
data = dietox)
summary(modelo_simp)
modelo_rand <- lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ Time | Pig,  # Permite que el efecto del tiempo varíe entre cerdos
correlation = corAR1(form = ~ Time | Pig),
data = dietox)
modelo_min <- lme(Weight ~ Time + Start + Feed,
random = ~ 1 | Pig,
correlation = corAR1(form = ~ Time | Pig),
data = dietox_clean)
modelo_min <- lme(Weight ~ Time + Start + Feed,
random = ~ 1 | Pig,
correlation = corAR1(form = ~ Time | Pig),
data = dietox)
summary(modelo_min)
AIC(modelo_cor, modelo_comp, modelo_simp, modelo_min)
BIC(modelo_cor, modelo_comp, modelo_simp, modelo_min)
# Predecir el peso con el modelo final para distintos niveles de Start
new_data <- expand.grid(
Time = 1:12,  # Semanas (tiempo)
Start = seq(min(dietox$Start), max(dietox$Start), length.out = 5),  # Diferentes valores de Start
Feed = mean(dietox$Feed),  # Media de Feed
Evit = factor('Evit000', levels = c('Evit000', 'Evit100', 'Evit200')),  # Niveles de Evit (se puede elegir uno)
Cu = factor('Cu000', levels = c('Cu000', 'Cu035', 'Cu175'))  # Niveles de Cu (se puede elegir uno)
)
# Predecir el peso
new_data$predicted_weight <- predict(modelo_cor, newdata = new_data)
# Generar datos de ejemplo para 'Pig' y 'Litter'
new_data <- expand.grid(
Time = 1:12,  # Semanas (tiempo)
Start = seq(min(dietox$Start), max(dietox$Start), length.out = 5),  # Diferentes valores de Start
Feed = mean(dietox$Feed),  # Media de Feed
Evit = factor('Evit000', levels = c('Evit000', 'Evit100', 'Evit200')),  # Niveles de Evit (se puede elegir uno)
Cu = factor('Cu000', levels = c('Cu000', 'Cu035', 'Cu175')),  # Niveles de Cu (se puede elegir uno)
Pig = factor(1),  # Un cerdo ficticio
Litter = factor(1)  # Un grupo ficticio de camada
)
# Predecir el peso
new_data$predicted_weight <- predict(modelo_cor, newdata = new_data)
# Graficar la evolución de Weight en función de Start
library(ggplot2)
ggplot(new_data, aes(x = Time, y = predicted_weight, color = factor(Start))) +
geom_line() +
labs(title = "Evolución del Peso a Diferentes Niveles de Start",
x = "Semana",
y = "Peso Predicho (Weight)",
color = "Valor de Start") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Crear una secuencia de tiempo para las predicciones
Time_seq <- seq(min(dietox$Time), max(dietox$Time), length.out = 100)
# Niveles de Start que queremos graficar
Start_levels <- unique(dietox$Start)
# Crear un data frame para almacenar las predicciones
pred_data <- expand.grid(Time = Time_seq, Start = Start_levels)
pred_data$Evit <- mean(dietox$Evit)  # Usar el valor medio de Evit
pred_data$Cu <- mean(dietox$Cu)      # Usar el valor medio de Cu
pred_data$Feed <- mean(dietox$Feed)  # Usar el valor medio de Feed
# Hacer predicciones usando el modelo
pred_data$Weight <- predict(modelo_cor, newdata = pred_data, level = 0)
# Crear una secuencia de tiempo para las predicciones
Time_seq <- seq(min(dietox$Time, na.rm = TRUE), max(dietox$Time, na.rm = TRUE), length.out = 100)
# Niveles de Start que queremos graficar
Start_levels <- unique(dietox$Start)
# Crear un data frame para almacenar las predicciones
pred_data <- expand.grid(Time = Time_seq, Start = Start_levels)
pred_data$Evit <- mean(dietox$Evit, na.rm = TRUE)  # Usar el valor medio de Evit
pred_data$Cu <- mean(dietox$Cu, na.rm = TRUE)      # Usar el valor medio de Cu
pred_data$Feed <- mean(dietox$Feed, na.rm = TRUE)  # Usar el valor medio de Feed
# Hacer predicciones usando el modelo
pred_data$Weight <- predict(modelo_cor, newdata = pred_data, level = 0)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(geepack)
library(ggplot2)
library(nlme)
library(lme4)
library(car)
data(dietox)
# Resumen estadístico de las variables
summary(dietox)
dietox <- na.omit(dietox)
# Gráfico de la evolución del peso con el tiempo según Evit y Cu
ggplot(dietox, aes(x = Time, y = Weight, color = factor(Evit), linetype = factor(Cu))) +
geom_line(aes(group = Pig), alpha = 0.5) +
geom_smooth(se = FALSE, size = 1.2) +
labs(title = "Evolución del Peso a lo largo del Tiempo",
x = "Semana",
y = "Peso (kg)",
color = "Vitamina E (mg/kg)",
linetype = "Cobre (mg/kg)") +
theme_minimal()
# Gráfico de Weight a lo largo del tiempo
ggplot(dietox, aes(x = Time, y = Weight, group = Pig, color = as.factor(Cu))) +
geom_line(alpha = 0.5) +
facet_wrap(~Evit) +
labs(title = "Evolución del peso a lo largo del tiempo según el nivel de vitamina E y cobre",
x = "Tiempo (semanas)", y = "Peso (kg)") +
theme_minimal()
# Ajustar el modelo mixto
modelo <- lme4::lmer(Weight ~ Time + Evit * Cu + Start + Feed + (1 | Pig) + (1 | Litter), data = dietox)
# Resumen del modelo
summary(modelo)
library(nlme)
modelo_cor <- nlme::lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,  # Efecto aleatorio por cerdo
correlation = corAR1(form = ~ Time | Pig),  # Correlación temporal dentro de cada cerdo
data = dietox)
summary(modelo_cor)
modelo_comp <- lme(Weight ~ Time + Evit * Cu + Start + Feed,
random = ~ 1 | Pig,
correlation = corCompSymm(form = ~ Time | Pig),
data = dietox)
summary(modelo_comp)
modelo_simp <- lme(Weight ~ Time + Evit + Cu + Start + Feed,
random = ~ 1 | Pig,
correlation = corAR1(form = ~ Time | Pig),
data = dietox)
summary(modelo_simp)
modelo_min <- lme(Weight ~ Time + Start + Feed,
random = ~ 1 | Pig,
correlation = corAR1(form = ~ Time | Pig),
data = dietox)
summary(modelo_min)
AIC(modelo_cor, modelo_comp, modelo_simp, modelo_min)
BIC(modelo_cor, modelo_comp, modelo_simp, modelo_min)
# Crear una secuencia de tiempo para las predicciones
Time_seq <- seq(min(dietox$Time, na.rm = TRUE), max(dietox$Time, na.rm = TRUE), length.out = 100)
# Niveles de Start que queremos graficar
Start_levels <- unique(dietox$Start)
# Crear un data frame para almacenar las predicciones
pred_data <- expand.grid(Time = Time_seq, Start = Start_levels)
pred_data$Evit <- mean(dietox$Evit, na.rm = TRUE)  # Usar el valor medio de Evit
pred_data$Cu <- mean(dietox$Cu, na.rm = TRUE)      # Usar el valor medio de Cu
pred_data$Feed <- mean(dietox$Feed, na.rm = TRUE)  # Usar el valor medio de Feed
# Hacer predicciones usando el modelo
pred_data$Weight <- predict(modelo_cor, newdata = pred_data, level = 0)
# Crear una secuencia de tiempo para las predicciones
Time_seq <- seq(min(dietox$Time, na.rm = TRUE), max(dietox$Time, na.rm = TRUE), length.out = 100)
# Niveles de Start que queremos graficar
Start_levels <- unique(dietox$Start)
# Crear un data frame para almacenar las predicciones
pred_data <- expand.grid(Time = Time_seq, Start = Start_levels)
pred_data$Evit <- mean(dietox$Evit, na.rm = TRUE)  # Usar el valor medio de Evit
pred_data$Cu <- mean(dietox$Cu, na.rm = TRUE)      # Usar el valor medio de Cu
pred_data$Feed <- mean(dietox$Feed, na.rm = TRUE)  # Usar el valor medio de Feed
pred_data$Pig <- factor(1)  # Usar un valor ficticio para 'Pig'
pred_data$Litter <- factor(1)  # Usar un valor ficticio para 'Litter'
# Hacer predicciones usando el modelo
pred_data$Weight <- predict(modelo_cor, newdata = pred_data, level = 0)
# Eliminar NA en las variables relevantes
dietox_clean <- na.omit(dietox)
# Crear una secuencia de tiempo para las predicciones
Time_seq <- seq(min(dietox_clean$Time), max(dietox_clean$Time), length.out = 100)
# Niveles de Start que queremos graficar
Start_levels <- unique(dietox_clean$Start)
# Crear un data frame para almacenar las predicciones
pred_data <- expand.grid(Time = Time_seq, Start = Start_levels)
# Agregar el valor medio de las demás variables
pred_data$Evit <- mean(dietox_clean$Evit, na.rm = TRUE)
pred_data$Cu <- mean(dietox_clean$Cu, na.rm = TRUE)
pred_data$Feed <- mean(dietox_clean$Feed, na.rm = TRUE)
# Crear valores ficticios para los efectos aleatorios
pred_data$Pig <- factor(1)
pred_data$Litter <- factor(1)
# Hacer predicciones usando el modelo
pred_data$Weight <- predict(modelo_cor, newdata = pred_data, level = 0)
summary(dietox)
# Utilizar el modelo final (modelo_cor) para obtener las predicciones
# Crear un conjunto de datos con diferentes valores de Start
start_values <- seq(min(dietox$Start), max(dietox$Start), length.out = 5)
# Crear un nuevo data frame para las predicciones
pred_data <- expand.grid(
Time = seq(1, 12, by = 1),  # Tiempo de 1 a 12 semanas
Start = start_values,  # Niveles de Start
Feed = mean(dietox$Feed, na.rm = TRUE),  # Promedio de Feed
Evit = 'Evit000',  # Valor fijo para Evit (como ejemplo)
Cu = 'Cu000'  # Valor fijo para Cu (como ejemplo)
)
# Hacer las predicciones del modelo para estos valores
pred_data$Predicted_Weight <- predict(modelo_cor, newdata = pred_data, re.form = ~0)
# Crear un conjunto de datos con diferentes valores de Start
start_values <- seq(min(dietox$Start), max(dietox$Start), length.out = 5)
# Crear un nuevo data frame para las predicciones (con cerdos ficticios y camadas)
pred_data <- expand.grid(
Time = seq(1, 12, by = 1),  # Tiempo de 1 a 12 semanas
Start = start_values,  # Niveles de Start
Feed = mean(dietox$Feed, na.rm = TRUE),  # Promedio de Feed
Evit = 'Evit000',  # Valor fijo para Evit (como ejemplo)
Cu = 'Cu000',  # Valor fijo para Cu (como ejemplo)
Pig = 1,  # Identificar un cerdo ficticio (necesario para efectos aleatorios)
Litter = 1  # Identificar una camada ficticia (necesario para efectos aleatorios)
)
# Hacer las predicciones del modelo para estos valores
pred_data$Predicted_Weight <- predict(modelo_cor, newdata = pred_data, re.form = ~0)
# Graficar la evolución del peso a lo largo del tiempo para diferentes niveles de Start
ggplot(pred_data, aes(x = Time, y = Predicted_Weight, color = as.factor(Start))) +
geom_line(size = 1.2) +
labs(title = "Evolución del peso a lo largo del tiempo para diferentes niveles de peso inicial (Start)",
x = "Tiempo (semanas)",
y = "Peso Predicho (kg)",
color = "Peso Inicial (Start)") +
theme_minimal()
install.packages("wfdb")  # Si no la tienes instalada
# Leer el archivo .hea para ver la información del ECG
hea_content <- readLines("ECGPCG0003.hea")
setwd("C:/Users/ADRI/Desktop/UNI/LONGITUDINALES/egc_longitudinales")
# Leer el archivo .hea para ver la información del ECG
hea_content <- readLines("ECGPCG0003.hea")
print(hea_content)
# Leer los datos binarios
ecg_data <- readBin("ECGPCG0003.dat", what = "integer", size = 2, signed = TRUE, endian = "little")
# Mostrar los primeros valores
head(ecg_data)
# Cargar la librería
library(ggplot2)
# Convertir los datos en un data frame
df <- data.frame(Time = seq(0, length(ecg_data$signal[,1])-1), Signal = ecg_data$signal[,1])
# Leer el archivo .hea para ver la información del ECG
hea_content <- readLines("ECGPCG0003.hea")
print(hea_content)
# Leer los datos binarios
ecg_data <- readBin("ECGPCG0003.dat", what = "integer", size = 2, signed = TRUE, endian = "little")
# Mostrar los primeros valores
head(ecg_data)
# Cargar la librería
library(ggplot2)
# Convertir los datos en un data frame
df <- data.frame(Time = seq(0, length(ecg_data$signal[,1])-1), Signal = ecg_data$signal[,1])
# Graficar
ggplot(df, aes(x = Time, y = Signal)) +
geom_line() +
labs(title = "ECG Signal", x = "Time", y = "Amplitude")
# Leer el archivo .hea para ver la información del ECG
hea_content <- readLines("ECGPCG0003.hea")
print(hea_content)
# Leer los datos binarios
ecg_data <- readBin("ECGPCG0003.dat", what = "integer", size = 2, signed = TRUE, endian = "little")
# Mostrar los primeros valores
head(ecg_data)
# Extraer valores de ECG y PCG
ecg <- ecg_data[seq(1, length(ecg_data), by = 2)]
pcg <- ecg_data[seq(2, length(ecg_data), by = 2)]
# Factores de conversión desde el archivo .hea
gain_ecg <- 110554.8863
baseline_ecg <- 10148
# Convertir ECG a mV
ecg_mV <- (ecg - baseline_ecg) / gain_ecg
# Crear el eje de tiempo
fs <- 8000  # Frecuencia de muestreo
t <- seq(0, length(ecg_mV) - 1) / fs
# Cargar la librería de gráficos
install.packages("ggplot2")
# Cargar la librería de gráficos
library(ggplot2)
# Convertir datos a un data frame
df <- data.frame(Time = t, Signal = ecg_mV)
# Graficar
ggplot(df, aes(x = Time, y = Signal)) +
geom_line() +
labs(title = "Señal ECG", x = "Tiempo (s)", y = "Amplitud (mV)") +
theme_minimal()
length(ecg_data)  # Ver cuántos valores se leyeron
head(ecg_data)
file.info("ECGPCG0003.dat")$size
# Leer correctamente el archivo asegurando el número correcto de valores
num_muestras <- 240000 * 2  # Multiplicamos por 2 porque hay 2 señales (ECG y PCG)
ecg_data <- readBin("ECGPCG0003.dat", what = "integer", size = 2, signed = TRUE, endian = "little", n = num_muestras)
# Verificar la cantidad de datos leídos
length(ecg_data)
head(ecg_data)
# Extraer valores de ECG y PCG del archivo .dat
ecg <- ecg_data[seq(1, length(ecg_data), by = 2)]
pcg <- ecg_data[seq(2, length(ecg_data), by = 2)]
# unidades físicas (mV)
# Factores de conversión desde el archivo .hea
gain_ecg <- 110554.8863
baseline_ecg <- 10148
# Convertir ECG a mV
ecg_mV <- (ecg - baseline_ecg) / gain_ecg
# Crear el eje de tiempo
fs <- 8000  # Frecuencia de muestreo
t <- seq(0, length(ecg_mV) - 1) / fs
# Cargar la librería de gráficos
library(ggplot2)
# Convertir datos a un data frame
df <- data.frame(Time = t, Signal = ecg_mV)
# Graficar
ggplot(df, aes(x = Time, y = Signal)) +
geom_line() +
labs(title = "Señal ECG", x = "Tiempo (s)", y = "Amplitud (mV)") +
theme_minimal()
length(ecg_data) == 480000
# Verificar que ambas señales tengan la mitad de los datos
length(ecg)  # Debería ser 240000
length(pcg)  # Debería ser 240000
##############################
##############################
## SEMINARIO ECG Y OUTLIERS ##
##############################
##############################
# Leer el archivo .hea para ver la información del ECG
hea_content <- readLines("ECGPCG0003.hea")
print(hea_content)
# Leer correctamente el archivo asegurando el número correcto de valores
num_muestras <- 240000 * 2  # Multiplicamos por 2 porque hay 2 señales (ECG y PCG)
ecg_data <- readBin("ECGPCG0003.dat", what = "integer", size = 2, signed = TRUE, endian = "little", n = num_muestras)
# Verificar la cantidad de datos leídos
length(ecg_data)
head(ecg_data)
length(ecg_data) == 480000 #comprobar que se ha leido bien
# Extraer valores de ECG y PCG del archivo .dat
ecg <- ecg_data[seq(1, length(ecg_data), by = 2)]
pcg <- ecg_data[seq(2, length(ecg_data), by = 2)]
# Verificar que ambas señales tengan la mitad de los datos
length(ecg)  # Debería ser 240000
length(pcg)  # Debería ser 240000
# unidades físicas (mV)
# Factores de conversión desde el archivo .hea
gain_ecg <- 110554.8863
baseline_ecg <- 10148
# Convertir ECG a mV
ecg_mV <- (ecg - baseline_ecg) / gain_ecg
# Crear el eje de tiempo
fs <- 8000  # Frecuencia de muestreo
t <- seq(0, length(ecg_mV) - 1) / fs
# Cargar la librería de gráficos
library(ggplot2)
# Convertir datos a un data frame
df <- data.frame(Time = t, Signal = ecg_mV)
# Graficar
ggplot(df, aes(x = Time, y = Signal)) +
geom_line() +
labs(title = "Señal ECG", x = "Tiempo (s)", y = "Amplitud (mV)") +
theme_minimal()
install.packages("pracma")
library(pracma)
# Filtrar la señal ECG para mejorar la detección
ecg_filtered <- movavg(ecg_mV, n = 5, type = "s")  # Media móvil para suavizar
# Detectar picos R (máximos locales)
picos_R <- findpeaks(ecg_filtered, nups = 1, npeaks = 1000)  # Ajusta npeaks según el ECG
# Extraer tiempos de los picos R
fs <- 8000
tiempos_picos_R <- picos_R[,2] / fs  # Convertir a segundos
# Graficar la señal con los picos R
plot(seq(0, length(ecg_mV) - 1) / fs, ecg_mV, type = "l", col = "blue", xlab = "Tiempo (s)", ylab = "Amplitud (mV)")
points(tiempos_picos_R, ecg_mV[picos_R[,2]], col = "red", pch = 19)  # Marcar picos R en rojo
intervalos_RR <- diff(tiempos_picos_R)  # Diferencia entre tiempos de picos R
# Graficar la serie de intervalos RR
plot(intervalos_RR, type = "l", col = "darkgreen", xlab = "Latido", ylab = "Intervalo RR (s)", main = "Serie de Intervalos RR")
Q1 <- quantile(intervalos_RR, 0.25)
Q3 <- quantile(intervalos_RR, 0.75)
IQR_val <- Q3 - Q1
# Definir límites de valores normales
lim_inf <- Q1 - 1.5 * IQR_val
lim_sup <- Q3 + 1.5 * IQR_val
# Identificar valores anómalos
anomalos <- which(intervalos_RR < lim_inf | intervalos_RR > lim_sup)
# Graficar con anomalías resaltadas
plot(intervalos_RR, type = "l", col = "darkgreen", xlab = "Latido", ylab = "Intervalo RR (s)", main = "Intervalos RR con Anomalías")
points(anomalos, intervalos_RR[anomalos], col = "red", pch = 19)  # Marcar anomalías en rojo
print(hea_content)
